jobs:
- job: 'TestLinuxWheelNoCuda'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python310-Linux:
        python.version: '3.10'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      ruff .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      cmake-lint _cmake/Find*  --disabled-codes C0103 C0113 --linelength=88
      cmake-lint _cmake/CMake*  --disabled-codes C0103 C0113 --linelength=88
    displayName: 'cmake-lint'
  - script: |
      cython-lint .
    displayName: 'cython-lint'
  - script: |
      python -m pip wheel . --wheel-dir dist --config-settings="--with_cuda=0" -v -v -v
    displayName: 'build wheel'
  - script: |
      python -m pip install . -v -v -v
    displayName: 'install wheel'
  - script: |
      mkdir _tests
      cd _tests
      python -m pytest .. --durations=10
    displayName: 'Runs Unit Tests'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-wheel-$(python.version)'
      targetPath: 'dist'

- job: 'TestLinux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python310-Linux:
        python.version: '3.10'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  # - script: sudo apt-get install -y pandoc
  #   displayName: 'Install Pandoc'
  # - script: sudo apt-get install -y inkscape
  #   displayName: 'Install Inkscape'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      ruff .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      cmake-lint _cmake/Find*  --disabled-codes C0103 C0113 --linelength=88
      cmake-lint _cmake/CMake*  --disabled-codes C0103 C0113 --linelength=88
    displayName: 'cmake-lint'
  - script: |
      cython-lint .
    displayName: 'cython-lint'
  - script: |
      # python -m pip install -e .
      python setup.py build_ext --inplace
    displayName: 'build'
  - script: |
      python setup.py bdist_wheel
    displayName: 'build wheel'
  - bash: |
      contents=$(cat .build_path.txt)
      export BUILD_PATH="$contents"
      cd $BUILD_PATH
      ctest --rerun-failed --output-on-failure
    displayName: 'Run C++ Unit Tests'

  - script: |
      python -m pytest --durations=10
    displayName: 'Runs Unit Tests'
  - script: |
      python -u setup.py bdist_wheel
    displayName: 'Build Package'
  - script: |
      python -m sphinx _doc dist/html
    displayName: 'Builds Documentation'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-$(python.version)'
      targetPath: 'dist'

- job: 'TestWindows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python311-Windows:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: |
        pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
        pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: set
    displayName: 'set'
  - script: |
        python setup.py build_ext --inplace
    displayName: 'build'
  - script: |
        python setup.py bdist_wheel
    displayName: 'build wheel'
  - powershell: |
        $contents = Get-Content -Path ".build_path.txt"
        cd $contents
        ctest -C Release --rerun-failed --output-on-failure
    displayName: 'Runs C++ Unit Tests'
  - script: |
        python -m pytest --durations=10
    displayName: 'Runs Unit Tests'
  - script: |
        python -u setup.py bdist_wheel
    displayName: 'Build Package'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-windows-$(python.version)'
      targetPath: 'dist'

- job: 'TestMac'
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python311-Mac:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  # use anaconda
  # - bash: echo "##vso[task.prependpath]$CONDA/bin"
  #   displayName: Add conda to PATH
  # - bash: sudo chown -R $USER $CONDA
  #   displayName: Take ownership of conda installation
  # - bash: conda create --yes --quiet --name myEnvironment
  #   displayName: Create Anaconda environment
  
  - script: |
      python -c "import sys;print(sys.executable)"
      python -c "import sys;print(sys.version_info)"
    displayName: 'Print'
  - script: brew install libomp
    displayName: 'Install omp'
  - script: brew install llvm
    displayName: 'Install llvm'
  - script: |
      pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
      pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      python -c "import sys;print('PYTHON', sys.executable)"
      python -c "import sys;print('PYTHON', sys.version_info)"
      python -c "import numpy;print('numpy', numpy.__version__)"
      python -c "import cython;print('cython', cython.__version__)"
    displayName: 'Print'
  - script: |
      python setup.py build_ext --inplace
    displayName: 'build'
  - script: |
      python setup.py bdist_wheel
    displayName: 'build wheel'
  - script: |
      source activate myEnvironment
      python -m pytest --durations=10
    displayName: 'Runs Unit Tests'
  - script: |
      python -u setup.py bdist_wheel
    displayName: 'Build Package'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-mac-$(python.version)'
      targetPath: 'dist'
