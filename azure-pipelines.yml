jobs:
- job: 'TestLinuxWheelNoCuda313'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python311-Linux:
        python.version: '3.13'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      cmake-lint _cmake/Find* --disabled-codes C0103 C0113 --line-width=88
      cmake-lint _cmake/CMake* --disabled-codes C0103 C0113 --line-width=88
    displayName: 'cmake-lint'
  - script: |
      rstcheck -r ./_doc ./onnx_extended
    displayName: 'rstcheck'
  - script: |
      cython-lint .
    displayName: 'cython-lint'
  - script: |
      export USE_CUDA=0
      python -m pip install -e . -v
    displayName: 'pip install -e . -v'
  - script: |
      set -e
      for f in $(find . -type f -name "test_*_cpp" -executable); do
          "$f"
      done  
    displayName: 'Unit test C++ onnx2'
  - script: |
      find . -type f -name "test_onnx*_cpp" -executable -exec {} \;
      find . -type f -name "test_validation*_cpp" -executable -exec {} \;
      find . -type f -name "test_c*_cpp" -executable -exec {} \;
      find . -type f -name "test_ort*_cpp" -executable -exec {} \;
      find . -type f -name "test_optops*_cpp" -executable -exec {} \;
    displayName: 'Unit test C++'
  - script: |
      python -m pytest _unittests --durations=10 --ignore _unittests/ut_ortcy --ignore _unittests/ut_reference --ignore _unittests/ut_onnx2/test_backend_onnx_vs_onnx2.py
    displayName: 'Unit Tests'
  - script: |
      python -m pytest _unittests/ut_onnx2/test_backend_onnx_vs_onnx2.py --durations=10 
    displayName: 'Test onnx2'
  - script: |
      python -m pytest _unittests/ut_ortcy --durations=10
    displayName: 'Test ortcy'
  - script: |
      python -m pytest _unittests/ut_reference --durations=10
    displayName: 'Test ortcy'
  - script: |
      # --config-settings does not work yet.
      # python -m pip wheel . --config-settings="--use_cuda=0" -v
      # python -m pip wheel . --global-option "--use_cuda=0" -v
      export USE_CUDA=0
      python -m pip wheel . -v
    displayName: 'Build Package0'
  - script: |
      mkdir dist
      cp onnx_extended*.whl dist
    displayName: 'copy wheel'
  - script: |
      pip install auditwheel-symbols
      auditwheel-symbols --manylinux 2014 dist/*.whl || exit 0
    displayName: 'Audit wheel'
  - script: |
      pip install abi3audit
      abi3audit dist/*.whl || exit 0
    displayName: 'abi3audit wheel'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-pip-$(python.version)'
      targetPath: 'dist'

- job: 'TestLinuxWheelNoCuda'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python311-Linux:
        python.version: '3.12'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      cmake-lint _cmake/Find* --disabled-codes C0103 C0113 --line-width=88
      cmake-lint _cmake/CMake* --disabled-codes C0103 C0113 --line-width=88
    displayName: 'cmake-lint'
  - script: |
      rstcheck -r ./_doc ./onnx_extended
    displayName: 'rstcheck'
  - script: |
      cython-lint .
    displayName: 'cython-lint'
  - script: |
      export USE_CUDA=0
      python -m pip install -e . -v
    displayName: 'pip install -e . -v'
  - script: |
      python -m pytest _unittests --durations=10 --ignore _unittests/ut_ortcy --ignore _unittests/ut_reference
    displayName: 'Unit Tests'
  - script: |
      python -m pytest _unittests/ut_ortcy --durations=10
    displayName: 'Test ortcy'
  - script: |
      python -m pytest _unittests/ut_reference --durations=10
    displayName: 'Test ortcy'
  - script: |
      # --config-settings does not work yet.
      # python -m pip wheel . --config-settings="--use_cuda=0" -v
      # python -m pip wheel . --global-option "--use_cuda=0" -v
      export USE_CUDA=0
      python -m pip wheel . -v
    displayName: 'Build Package0'
  - script: |
      mkdir dist
      cp onnx_extended*.whl dist
    displayName: 'copy wheel'
  - script: |
      pip install auditwheel-symbols
      auditwheel-symbols --manylinux 2014 dist/*.whl || exit 0
    displayName: 'Audit wheel'
  - script: |
      pip install abi3audit
      abi3audit dist/*.whl || exit 0
    displayName: 'abi3audit wheel'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-pip-$(python.version)'
      targetPath: 'dist'

- job: 'TestLinux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python311-Linux:
        python.version: '3.10'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  # - script: sudo apt-get install -y pandoc
  #   displayName: 'Install Pandoc'
  # - script: sudo apt-get install -y inkscape
  #   displayName: 'Install Inkscape'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      ruff check .
    displayName: 'Ruff'
  - script: |
      black --diff .
    displayName: 'Black'
  - script: |
      cmake-lint _cmake/Find* --disabled-codes C0103 C0113 --line-width=88
      cmake-lint _cmake/CMake* --disabled-codes C0103 C0113 --line-width=88
    displayName: 'cmake-lint'
  - script: |
      cython-lint .
    displayName: 'cython-lint'
  - script: |
      # python -m pip install -e .
      python setup.py build_ext --inplace
    displayName: 'build inplace'
  - script: |
      find . -type f -name "test_onnx*_cpp" -executable -exec {} \;
      find . -type f -name "test_validation*_cpp" -executable -exec {} \;
      find . -type f -name "test_c*_cpp" -executable -exec {} \;
      find . -type f -name "test_ort*_cpp" -executable -exec {} \;
      find . -type f -name "test_optops*_cpp" -executable -exec {} \;
    displayName: 'Unit test C++'
  - script: |
      python -m pytest _unittests --durations=10 --ignore _unittests/ut_ortcy --ignore _unittests/ut_reference
    displayName: 'Unit Tests'
  - script: |
      python -m pytest _unittests/ut_ortcy --durations=10
    displayName: 'Test ortcy'
  - script: |
      python -m pytest _unittests/ut_reference --durations=10
    displayName: 'Test ortcy'
  - script: |
      python -u setup.py bdist_wheel
    displayName: 'Build Package2'
  - script: |
      pip install auditwheel-symbols
      auditwheel-symbols --manylinux 2014 dist/*.whl || exit 0
    displayName: 'Audit wheel'
  - script: |
      pip install abi3audit
      abi3audit dist/*.whl || exit 0
    displayName: 'abi3audit wheel'
  - script: |
      ls dist/*
      find dist -type f \( -name "onnx_extended*.whl" \) | while read f; do
          echo "pip install $f";
          python -m pip install $f;
      done
    displayName: 'install built wheel'
  - script: |
      cd dist
      python -m pytest ../_unittests
    displayName: 'check unit test with the whl'
  - script: |
      ls -l
    displayName: 'current folder'
  - script: |
      python -c "import onnx_extended;print('has_cuda:',onnx_extended.has_cuda())"
    displayName: 'has_cuda?'
  - script: |
      cp LICENSE* ./_doc
      cp CHANGELOGS* ./_doc
    displayName: 'Copy license, changelogs'
  - script: |
      UNITTEST_GOING=1 python -m sphinx _doc dist/html -v
    displayName: 'Builds Documentation'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-$(python.version)'
      targetPath: 'dist'

- job: 'TestWindows'
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      Python311-Windows:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: |
        pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
        pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: set
    displayName: 'set'
  - script: |
        python setup.py build_ext --inplace
    displayName: 'build'
  - script: |
        python setup.py install
    displayName: 'build wheel'
  - script: |
      python -m pytest _unittests --durations=10 --ignore _unittests/ut_ortcy --ignore _unittests/ut_reference
    displayName: 'Unit Tests'
  - script: |
      python -m pytest _unittests/ut_ortcy --durations=10
    displayName: 'Test ortcy'
  - script: |
      python -m pytest _unittests/ut_reference --durations=10
    displayName: 'Test ortcy'
  - script: |
        python -u setup.py bdist_wheel
    displayName: 'Build Package3'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-windows-$(python.version)'
      targetPath: 'dist'

- job: 'TestMac'
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python311-Mac:
        python.version: '3.11'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  # use anaconda
  # - bash: echo "##vso[task.prependpath]$CONDA/bin"
  #   displayName: Add conda to PATH
  # - bash: sudo chown -R $USER $CONDA
  #   displayName: Take ownership of conda installation
  # - bash: conda create --yes --quiet --name myEnvironment
  #   displayName: Create Anaconda environment
  
  - script: |
      python -c "import sys;print(sys.executable)"
      python -c "import sys;print(sys.version_info)"
    displayName: 'Print'
  - script: brew install libomp
    displayName: 'Install omp'
  # macOS already provides this software and installing another version in parallel can cause all kinds of trouble.
  # - script: brew install llvm
  #   displayName: 'Install llvm'
  - script: |
      pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: |
      pip install -r requirements-dev.txt
    displayName: 'Install Requirements dev'
  - script: |
      gcc --version
      python -c "import sys;print('PYTHON', sys.executable)"
      python -c "import sys;print('PYTHON', sys.version_info)"
      python -c "import numpy;print('numpy', numpy.__version__)"
      python -c "import cython;print('cython', cython.__version__)"
    displayName: 'Print'
  - script: |
      python setup.py build_ext --inplace
    displayName: 'build'
  - script: |
      python setup.py bdist_wheel
    displayName: 'build wheel'
  - script: |
      source activate myEnvironment
      python -m pytest _unittests --durations=10 --ignore _unittests/ut_ortcy --ignore _unittests/ut_reference
    displayName: 'Unit Tests'
  - script: |
      source activate myEnvironment
      python -m pytest _unittests/ut_ortcy --durations=10
    displayName: 'Test ortcy'
  - script: |
      source activate myEnvironment
      python -m pytest _unittests/ut_reference --durations=10
    displayName: 'Test ortcy'
  - script: |
      python -u setup.py build
    displayName: 'Build Package4'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-mac-$(python.version)'
      targetPath: 'dist'
